




selector {

    property: value;
}

the selector is what we are instructing the css to work on, the property is self explanatory (it is the property or attribute of the selector we are changing), and the value to the end value
    of the selector property we are manipulating.

* - the universal selector. Selects every possible element on the page.

element selector - selects all elements of that type (img, div, button, etc etc)

a comma can combine elements in a selector list. (h1, h2 would combine all h1's and h2's)

# - The ID selector. Parses and finds the ID in the html document and focuses in on it. This is used to style a SINGULAR THING. Keep ID's to a minimum on a page.

. - The Class selector. This is similar to the ID selector but it is something that is to be used by multiple elements.

The Descendant Selector - start with the base selector (in this case "li") and then add a space and add the sub-selector (in this case "a") to select all anchor tags ("a") within the "li" element
    li a {
        color:teal;
    }
    No 'li" will be styled with the above, only the "a" inside of "li"
    This is repeatable and can be nested as far down as you like but isn't the best practice.

"+" is the combinator that modifies any element that comes directly after the first. So a "footer + a" will only change the a that is directly following the footer, not nested or a child.
    a good example of this is
        header + button{

        }
    which would change the button, just one, that is immediately following the header. 

">" is the direct child combinato. It has to be one level down, only one level. 
    Header > a {

    }
    would all this to be modified but if it is further nested it will not be changed

The Attribute Selector -select elements based on attribute. The this is used a lot for inputs.
    input[type="password"] {
        color: blue
    }
    There are ways to specify how and what is styled, even filtering but not used frequently

Pseudo Classes - keyword added to a selector that specifies a special state of the selected elements 
    a:hover{
        color: orange
    }


Pseudo Elements!
    Keyword added to a selector that lets you style a particular part of the selected element!
        ::after
        ::before
        ::first-letter
        ::first-line
        ::selection (This is when something is)
    
    Two! Count 'em, two! semi-colons for Psuedo-Elements (only 1 for Pseudo-Classes)!

Cascade - The styles for the stylesheet are completed in order, which ever is the last set property will be the one displayed.
    In addition, multiple stylesheets will hold true to the same logic. The latest stylesheet linked will be the one used.

Specificity - the more specific style is the more the browser will value it for its style. General formula goes:
    Id > Class, Attribute, Pseudo-classes selector > Element Pseudo-Element Selectors.
    There is a formula that takes a score into account, it is adviced to not worry about memorizing it but to familarize yourself with the general idea rather than the numbers
    In-line styles are more specific than any stylesheet stylings. 
     "!important" after a selector signals to the browser that this is the exception to the model and should always win the specificity.
        Shouldn't use this unless there is no other option.

Inheritance - styles will be inherited by child elements from the element it is nested in unless otherwise specified. Inheritance will be the closest parent with a specified element.
    some elements do not always inherit (form is one of them) if we want this to happen inside the element give it an attribuite with the style "inherit"
        button, input {
            color: inherit;
        }
    
